{"version":3,"sources":["components/Profile/index.js","components/Statistics/index.js","components/FriendList/index.js","components/TransactionHistory/index.js","App.js","serviceWorker.js","index.js"],"names":["Profile","name","tag","location","avatar","stats","className","src","alt","followers","views","likes","defaultProps","Statistics","title","map","upload","key","id","label","percentage","FriendList","friends","friend","isActive","isOnline","width","TransactionHistory","items","transaction","type","amount","currency","App","user","statisticalData","transactions","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"u5GAKMA,G,kBAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,SAAUC,EAAvB,EAAuBA,OAAQC,EAA/B,EAA+BA,MAA/B,OAChB,yBAAKC,UAAU,WACX,yBAAKA,UAAU,WACf,yBAAKA,UAAU,eACX,yBACAC,IAAKH,EACLI,IAAI,cACJF,UAAU,WAEV,uBAAGA,UAAU,QAAQL,GACrB,uBAAGK,UAAU,OAAb,IAAqBJ,GACrB,uBAAGI,UAAU,YAAYH,IAG7B,wBAAIG,UAAU,SACV,4BACA,0BAAMA,UAAU,SAAhB,aACA,0BAAMA,UAAU,YAAYD,EAAMI,YAElC,4BACA,0BAAMH,UAAU,SAAhB,SACA,0BAAMA,UAAU,YAAYD,EAAMK,QAElC,4BACA,0BAAMJ,UAAU,SAAhB,SACA,0BAAMA,UAAU,YAAYD,EAAMM,aAqB1CX,EAAQY,aAAc,CAClBR,OAAO,gFAGIJ,Q,OC1BAa,G,MA1BI,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,MACxB,OACA,6BAASC,UAAU,cACf,wBAAIA,UAAU,cAAcQ,GAC5B,wBAAIR,UAAU,aACTD,EAAMU,KAAI,SAAAC,GAAM,OACjB,wBAAIC,IAAKD,EAAOE,GAAIZ,UAAU,aAC1B,0BAAMA,UAAU,cAAcU,EAAOG,OACrC,0BAAMb,UAAU,mBAAmBU,EAAOI,WAA1C,a,OCoBDC,G,MA3BI,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACnB,wBAAIhB,UAAU,eACTgB,EAAQP,KAAI,SAAAQ,GACT,IAAMC,EAAWD,EAAOE,SAAW,uBAAuB,wBAC1D,OACA,wBAAIR,IAAKM,EAAOL,GAAIZ,UAAU,eAC1B,0BAAMA,UAAWkB,EAAUC,SAAUF,EAAOE,WAC5C,yBAAKnB,UAAU,gBAAgBC,IAAKgB,EAAOnB,OAAQI,IAAKe,EAAOtB,KAAMyB,MAAM,QAC3E,uBAAGpB,UAAU,eAAeiB,EAAOtB,a,OCyBhC0B,G,MAjCY,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACzB,OACI,2BAAOtB,UAAU,uBACb,2BAAOA,UAAU,cACb,4BACA,oCACA,sCACA,0CAGJ,+BACEsB,EAAMb,KAAI,SAAAc,GAAW,OACnB,wBAAIvB,UAAU,YAAYW,IAAKY,EAAYX,IAC3C,4BAAKW,EAAYC,MACjB,4BAAKD,EAAYE,QACjB,4BAAKF,EAAYG,kB,OCSlBC,MAhBf,WAEE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CAASL,KAAMiC,EAAKjC,KACpBC,IAAKgC,EAAKhC,IACVC,SAAU+B,EAAK/B,SACfC,OAAQ8B,EAAK9B,OACbC,MAAO6B,EAAK7B,QACZ,kBAAC,EAAD,CAAYS,MAAM,eAAeT,MAAO8B,IACxC,kBAAC,EAAD,CAAYb,QAASA,IACrB,kBAAC,EAAD,CAAoBM,MAAOQ,MCXbC,QACW,cAA7BC,OAAOnC,SAASoC,UAEe,UAA7BD,OAAOnC,SAASoC,UAEhBD,OAAOnC,SAASoC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.77790a62.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Profile.scss'\n\n\nconst Profile = ({name, tag, location, avatar, stats}) => (\n<div className=\"wrapper\">\n    <div className=\"profile\">\n    <div className=\"description\">\n        <img\n        src={avatar}\n        alt=\"user avatar\"\n        className=\"avatar\"\n        />\n        <p className=\"name\">{name}</p>\n        <p className=\"tag\">@{tag}</p>\n        <p className=\"location\">{location}</p>\n    </div>\n\n    <ul className=\"stats\">\n        <li>\n        <span className=\"label\">Followers</span>\n        <span className=\"quantity\">{stats.followers}</span>\n        </li>\n        <li>\n        <span className=\"label\">Views</span>\n        <span className=\"quantity\">{stats.views}</span>\n        </li>\n        <li>\n        <span className=\"label\">Likes</span>\n        <span className=\"quantity\">{stats.likes}</span>\n        </li>\n    </ul>\n    </div>\n</div>\n);\n\nProfile.propTypes ={\n    name: PropTypes.string, \n    tag: PropTypes.string, \n    location: PropTypes.string, \n    avatar: PropTypes.string, \n    //Обратить внимание сюда\n    stats:  PropTypes.exact({\n            followers: PropTypes.number.isRequired ,\n            views: PropTypes.number.isRequired,\n            likes: PropTypes.number.isRequired\n          })\n    \n};\n\nProfile.defaultProps ={\n    avatar:'https://i.pinimg.com/originals/a0/40/66/a04066a2d1fcf25df39c599e093995c8.jpg'\n};\n\nexport default Profile;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Statistics.scss'\nconst Statistics = ({title, stats} )=>{\n    return ( \n    <section className=\"statistics\">\n        <h2 className=\"stat-title\">{title}</h2>\n        <ul className=\"stat-list\">\n            {stats.map(upload => (\n            <li key={upload.id} className=\"stat-item\">\n                <span className=\"stat-label\">{upload.label}</span>\n                <span className=\"stat-percentage\">{upload.percentage}%</span>\n            </li>  \n            ))}\n        </ul>\n    </section>\n    )};\n\n\nStatistics.propTypes={\n    title: PropTypes.string,\n    stats: PropTypes.arrayOf(\n        PropTypes.exact({\n            id: PropTypes.string.isRequired,\n            label: PropTypes.string.isRequired,\n            percentage: PropTypes.number.isRequired\n        })\n    )\n}\nexport default Statistics;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './FriendList.scss'\n\nconst FriendList = ({friends}) => (\n<ul className=\"friend-list\">\n    {friends.map(friend =>{\n        const isActive = friend.isOnline ? 'friend-status online':'friend-status offline';\n        return(\n        <li key={friend.id} className=\"friend-item\">\n            <span className={isActive} isOnline={friend.isOnline} ></span>\n            <img className=\"friend-avatar\" src={friend.avatar} alt={friend.name} width=\"100\" />\n            <p className=\"friend-name\">{friend.name}</p>\n        </li>\n    )\n    })}\n</ul>\n)\n\nFriendList.propTypes={\n    friend: PropTypes.arrayOf(\n        PropTypes.shape({\n            avatar: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            isOnline: PropTypes.bool.isRequired,\n            //изначально указал string, но он хочет number\n            id: PropTypes.number.isRequired \n        })\n    )\n}\n\nexport default FriendList;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './TransactionHistory.scss'\n\nconst TransactionHistory = ({items}) => {\n    return(\n        <table className=\"transaction-history\">\n            <thead className=\"table-head\">\n                <tr>\n                <th>Type</th>\n                <th>Amount</th>\n                <th>Currency</th>\n                </tr>\n            </thead>\n            <tbody>\n            { items.map(transaction => (\n                <tr className='tbody-row' key={transaction.id}>\n                <td>{transaction.type}</td>\n                <td>{transaction.amount}</td>\n                <td>{transaction.currency}</td>\n                </tr>\n                \n            ))}\n            </tbody>\n        </table>\n    )\n}\n\nTransactionHistory.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.exact({\n        id: PropTypes.string,\n        type:PropTypes.string.isRequired,\n        amount: PropTypes.string.isRequired,\n        currency: PropTypes.string.isRequired\n    }))\n}\nexport default TransactionHistory","import React from 'react';\n\nimport './App.scss';\nimport Profile from './components/Profile';\nimport user from './components/Profile/user.json';\nimport Statistics from './components/Statistics';\nimport statisticalData from './components/Statistics/statistical-data.json';\nimport FriendList from './components/FriendList';\nimport friends from './components/FriendList/friends.json';\nimport TransactionHistory from './components/TransactionHistory'\nimport transactions from './components/TransactionHistory/transactions.json'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Profile name={user.name}\n      tag={user.tag}\n      location={user.location}\n      avatar={user.avatar}\n      stats={user.stats} />\n      <Statistics title=\"Upload stats\" stats={statisticalData}/>\n      <FriendList friends={friends} />\n      <TransactionHistory items={transactions} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}